package com.github.puhlikov.interviewbot.bot;

import com.github.puhlikov.interviewbot.enums.QuestionState;
import com.github.puhlikov.interviewbot.enums.RegistrationState;
import com.github.puhlikov.interviewbot.model.BotUser;
import com.github.puhlikov.interviewbot.model.Question;
import com.github.puhlikov.interviewbot.repo.BotUserRepository;
import com.github.puhlikov.interviewbot.service.QuestionService;
import com.github.puhlikov.interviewbot.service.QuestionSessionService;
import com.github.puhlikov.interviewbot.service.RegistrationService;
import com.github.puhlikov.interviewbot.service.WorkingApiService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardRemove;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Component
public class InterviewTelegramBot extends TelegramLongPollingBot {

    private final String username;
    private final BotUserRepository users;
    private final QuestionService questions;
//    private final DeepSeekService deepseek;
    private final RegistrationService registrationService;
    private final QuestionSessionService questionSessionService;
    private final QuestionService questionService;
    private final WorkingApiService workingApiService;

    public InterviewTelegramBot(
            @Value("${telegram.bot.username}") String username,
            @Value("${telegram.bot.token}") String token,
            BotUserRepository users,
            QuestionService questions,
//            DeepSeekService deepseek,
            RegistrationService registrationService,
            QuestionSessionService questionSessionService,
            QuestionService questionService,
            WorkingApiService workingApiService
    ) {
        super(token);
        this.username = username;
        this.users = users;
        this.questions = questions;
//        this.deepseek = deepseek;
        this.registrationService = registrationService;
        this.questionSessionService = questionSessionService;
        this.questionService = questionService;
        this.workingApiService = workingApiService;

        System.out.println("ü§ñ Bot initialized:");
        System.out.println("   Username: " + username);
        System.out.println("   Token: " + (token != null ? token.substring(0, 10) + "..." : "null"));
    }

    @Override
    public String getBotUsername() {
        return username;
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasMessage() && update.getMessage().hasText()) {
                handleMessage(update);
            } else if (update.hasCallbackQuery()) {
                handleCallback(update.getCallbackQuery());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handleMessage(Update update) {
        var msg = update.getMessage();
        var chatId = msg.getChatId();
        var text = msg.getText().trim();

        Optional<BotUser> userOpt = registrationService.getUserByChatId(chatId);

        if (!userOpt.isPresent() || userOpt.get().getRegistrationState() == RegistrationState.START) {
            if ("/start".equalsIgnoreCase(text)) {
                startRegistration(chatId);
            } else {
                execSend(chatId, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start");
            }
            return;
        }

        BotUser user = userOpt.get();

        if (handleQuestionSession(chatId, text)) {
            return;
        }

        if (user.getRegistrationState() == RegistrationState.COMPLETED) {
            handleCompletedUser(chatId, text, user);
        } else {
            handleRegistrationStep(chatId, text, user);
        }
    }

    private void startRegistration(Long chatId) {
        registrationService.startRegistration(chatId);
        execSend(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:");
    }

    private void handleRegistrationStep(Long chatId, String text, BotUser user) {
        switch (user.getRegistrationState()) {
            case FIRST_NAME:
                registrationService.updateFirstName(chatId, text);
                execSend(chatId, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:");
                break;

            case LAST_NAME:
                registrationService.updateLastName(chatId, text);
                execSend(chatId, "–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à username (–±–µ–∑ @):");
                break;

            case USERNAME:
                registrationService.updateUsername(chatId, text);
                execSend(chatId, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:mm (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00):");
                break;

            case SCHEDULE_TIME:
                try {
                    registrationService.updateScheduleTime(chatId, text);
                    var keyboard = registrationService.getTimezoneKeyboard();
                    execSend(chatId, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", keyboard);
                } catch (IllegalArgumentException e) {
                    execSend(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:mm (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00):");
                }
                break;

            case TIMEZONE:
                registrationService.updateTimezone(chatId, text);
                var removeKeyboard = ReplyKeyboardRemove.builder().removeKeyboard(true).build();
                execSend(chatId,
                        "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n" +
                                "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ " +
                                user.getScheduleTime() + " –ø–æ –≤—Ä–µ–º–µ–Ω–∏ " + text + "\n\n" +
                                "–ö–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –≤—Ä–µ–º—è, —è —Å–ø—Ä–æ—à—É, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.",
                        removeKeyboard
                );
                break;

            case COMPLETED:
                handleCompletedUser(chatId, text, user);
                break;
        }
    }

    private void handleCompletedUser(Long chatId, String text, BotUser user) {
        if ("/question".equalsIgnoreCase(text)) {
            sendQuestion(chatId);
        } else if ("/add_question".equalsIgnoreCase(text)) {
            startAddingQuestion(chatId);
        } else if ("/menu".equalsIgnoreCase(text)) {
            showMainMenu(chatId);
        } else {
            showMainMenu(chatId);
        }
    }

    private void sendQuestion(Long chatId) {
        List<Question> questionList = questions.getRandomQuestions(1);
        if (questionList.isEmpty()) {
            execSend(chatId, "–í –±–∞–∑–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.");
            return;
        }

        Question question = questionList.get(0);
        var kb = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        var btn = InlineKeyboardButton.builder()
                .text("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç")
                .callbackData("ANS:" + question.getId())
                .build();
        rows.add(List.of(btn));
        kb.setKeyboard(rows);
        execSend(chatId, "‚ùì –í–æ–ø—Ä–æ—Å:\n\n" + question.getQuestionText(), kb);
    }

    private void handleCallback(CallbackQuery cq) {
        var data = cq.getData();
        if (data != null && data.startsWith("ANS:")) {
            var qid = Long.parseLong(data.substring(4));
            questions.getById(qid).ifPresent(q -> {
                try {
                    execute(AnswerCallbackQuery.builder()
                            .callbackQueryId(cq.getId())
                            .text("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç...")
                            .build());
                } catch (Exception ignored) {
                }

                workingApiService.getAnswer(q.getQuestionText()).subscribe(answer -> { // –ó–∞–º–µ–Ω—è–µ–º deepseek –Ω–∞ workingApiService
                    try {
                        String formattedAnswer = "ü§ñ –û—Ç–≤–µ—Ç:\n\n" + answer;
                        execSend(cq.getMessage().getChatId(), formattedAnswer);
                    } catch (Exception ignored) {
                    }
                });
//                deepseek.getAnswer(q.getQuestionText()).subscribe(answer -> {
//                    try {
//                        String formattedAnswer = "ü§ñ –û—Ç–≤–µ—Ç:\n\n" + answer;
//                        execSend(cq.getMessage().getChatId(), formattedAnswer);
//                    } catch (Exception ignored) {
//                    }
//                });
            });
        } else if (data != null && data.equals("YES_TEST")) {
            handleTestResponse(cq, true);
        } else if (data != null && data.equals("NO_TEST")) {
            handleTestResponse(cq, false);
        } else if (data != null && data.startsWith("DIFF_")) {
            handleDifficultySelection(cq, data.substring(5));
        } else if (data != null && data.equals("RANDOM_QUESTION")) {
            try {
                execute(AnswerCallbackQuery.builder()
                        .callbackQueryId(cq.getId())
                        .text("–ò—â–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å...")
                        .build());
            } catch (Exception ignored) {
            }
            sendQuestion(cq.getMessage().getChatId());
        } else if (data != null && data.equals("ADD_QUESTION")) {
            try {
                execute(AnswerCallbackQuery.builder()
                        .callbackQueryId(cq.getId())
                        .text("–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞...")
                        .build());
            } catch (Exception ignored) {
            }
            startAddingQuestion(cq.getMessage().getChatId());
        }
    }

    private void handleTestResponse(CallbackQuery cq, boolean acceptTest) {
        try {
            if (acceptTest) {
                execute(AnswerCallbackQuery.builder()
                        .callbackQueryId(cq.getId())
                        .text("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç!")
                        .build());
                sendQuestion(cq.getMessage().getChatId());
            } else {
                execute(AnswerCallbackQuery.builder()
                        .callbackQueryId(cq.getId())
                        .text("–•–æ—Ä–æ—à–æ, –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑!")
                        .build());
            }
        } catch (Exception ignored) {
        }
    }

    public void sendDailyNotification(Long chatId) {
        var kb = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        var yesBtn = InlineKeyboardButton.builder()
                .text("‚úÖ –î–∞")
                .callbackData("YES_TEST")
                .build();

        var noBtn = InlineKeyboardButton.builder()
                .text("‚ùå –ù–µ—Ç")
                .callbackData("NO_TEST")
                .build();

        rows.add(List.of(yesBtn, noBtn));
        kb.setKeyboard(rows);

        execSend(chatId, "üïê –í—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞!\n\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å–µ–≥–æ–¥–Ω—è?", kb);
    }

    private void execSend(Long chatId, String text) {
        execSend(chatId, text, null);
    }

    private void execSend(Long chatId, String text, Object replyMarkup) {
        try {
            var sm = SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(text)
                    .replyMarkup((ReplyKeyboard) replyMarkup)
                    .build();
            execute(sm);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean handleQuestionSession(Long chatId, String text) {
        QuestionSessionService.QuestionSession session = questionSessionService.getSession(chatId);

        if (session == null) {
            if ("/add_question".equalsIgnoreCase(text)) {
                startAddingQuestion(chatId);
                return true;
            }
            return false;
        }

        switch (session.getState()) {
            case AWAITING_QUESTION_TEXT:
                handleAwaitingQuestionText(chatId, text);
                return true;

            case AWAITING_QUESTION_CATEGORY:
                handleAwaitingQuestionCategory(chatId, text);
                return true;

            default:
                return false;
        }
    }

    private void startAddingQuestion(Long chatId) {
        questionSessionService.startSession(chatId);
        execSend(chatId,
                "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞**\n\n" +
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:"
        );
    }

    private void handleAwaitingQuestionText(Long chatId, String text) {
        questionSessionService.setQuestionText(chatId, text);
        questionSessionService.updateState(chatId, QuestionState.AWAITING_QUESTION_CATEGORY);
        execSend(chatId, "üìö –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Java, SQL, Algorithms):");
    }

    private void handleAwaitingQuestionCategory(Long chatId, String text) {
        questionSessionService.setCategory(chatId, text);
        questionSessionService.updateState(chatId, QuestionState.AWAITING_QUESTION_DIFFICULTY);


        var keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        var juniorBtn = InlineKeyboardButton.builder()
                .text("üë∂ Junior")
                .callbackData("DIFF_JUNIOR")
                .build();

        var middleBtn = InlineKeyboardButton.builder()
                .text("üíº Middle")
                .callbackData("DIFF_MIDDLE")
                .build();

        var seniorBtn = InlineKeyboardButton.builder()
                .text("üéØ Senior")
                .callbackData("DIFF_SENIOR")
                .build();

        rows.add(List.of(juniorBtn, middleBtn));
        rows.add(List.of(seniorBtn));

        keyboard.setKeyboard(rows);

        execSend(chatId, "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", keyboard);
    }

    private void handleDifficultySelection(CallbackQuery cq, String difficulty) {
        try {
            var chatId = cq.getMessage().getChatId();
            var session = questionSessionService.getSession(chatId);

            if (session != null && session.getState() == QuestionState.AWAITING_QUESTION_DIFFICULTY) {
                String difficultyText = switch (difficulty) {
                    case "JUNIOR" -> "Junior";
                    case "MIDDLE" -> "Middle";
                    case "SENIOR" -> "Senior";
                    default -> difficulty;
                };

                Question question = new Question();
                question.setQuestionText(session.getQuestionText());
                question.setCategory(session.getCategory());
                question.setDifficultyLevel(difficultyText);
                question.setIsActive(true);

                questionService.save(question);

                questionSessionService.completeSession(chatId);

                execSend(chatId,
                        "‚úÖ **–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n" +
                                "üìñ –¢–µ–∫—Å—Ç: " + question.getQuestionText() + "\n" +
                                "üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + question.getCategory() + "\n" +
                                "üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å: " + question.getDifficultyLevel() + "\n\n" +
                                "–í–æ–ø—Ä–æ—Å —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–∞–∑–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
                );

                execute(AnswerCallbackQuery.builder()
                        .callbackQueryId(cq.getId())
                        .text("–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞: " + difficultyText)
                        .build());
            }
        } catch (Exception e) {
            e.printStackTrace();
            execSend(cq.getMessage().getChatId(), "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            questionSessionService.completeSession(cq.getMessage().getChatId());
        }
    }

    private void showMainMenu(Long chatId) {
        var keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        var questionBtn = InlineKeyboardButton.builder()
                .text("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
                .callbackData("RANDOM_QUESTION")
                .build();

        var addQuestionBtn = InlineKeyboardButton.builder()
                .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
                .callbackData("ADD_QUESTION")
                .build();

        rows.add(List.of(questionBtn));
        rows.add(List.of(addQuestionBtn));
        keyboard.setKeyboard(rows);

        execSend(chatId,
                "üìã **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n" +
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                keyboard
        );
    }

}